generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User table
model User {
  id        String  @id
  firstName String
  lastName  String
  username  String  @unique
  email     String  @unique
  picture   String?
  sentRequests    FriendRequest[]  @relation("SentRequests")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")
  friends         Friend[]         @relation("UserFriends")

  // Relationships
  bets Bet[]
  accountabilityGoals Goal[] @relation("GoalAccountabilityPartner")
  creatorGoals        Goal[] @relation("GoalCreator")
  participants        GoalParticipant[]


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FriendRequest {
  id         String   @id @default(cuid())
  sender     User     @relation("SentRequests", fields: [senderId], references: [id])
  senderId   String
  receiver   User     @relation("ReceivedRequests", fields: [receiverId], references: [id])
  receiverId String
  status     RequestStatus
  createdAt  DateTime @default(now())

  @@unique([senderId, receiverId])
}

model Friend {
  id        String   @id @default(cuid())
  user      User     @relation("UserFriends", fields: [userId], references: [id])
  userId    String
  friendId  String   
  createdAt DateTime @default(now())

  @@unique([userId, friendId])
}

enum RequestStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}

// Goal/Bet tables
enum GoalStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  FAILED
}

model Goal {
  id                      String     @id @default(uuid())
  title                   String
  description             String
  stakes                  Int        @default(0)
  isGroupGoal             Boolean    @default(false)
  accountabilityPartner   User?      @relation("GoalAccountabilityPartner", fields: [accountabilityPartnerId], references: [id], onDelete: SetNull)
  accountabilityPartnerId String?
  creatorId               String
  creator                 User       @relation("GoalCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt

  // Start and end dates
  startDate               DateTime
  endDate                 DateTime

  // Goal status and bets
  status                  GoalStatus @default(NOT_STARTED)
  Bet Bet[]

  // Participants
  participants            GoalParticipant[]
}


enum BetType {
  ON
  AGAINST
}

model Bet {
  id        String   @id @default(uuid())
  amount    Float
  goal      Goal     @relation(fields: [goalId], references: [id])
  goalId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  betType   BetType
}

model GoalParticipant {
  user       User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  goal       Goal @relation(fields: [goalId], references: [id], onDelete: Cascade)
  goalId     String

  createdAt DateTime @default(now())

  @@id([userId, goalId]) // Composite primary key to prevent duplicate entries
}